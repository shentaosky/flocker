# -*- mode: ruby -*-
# vi: set ft=ruby ts=2 sts=2:

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = '2'

# This allows the VM to be restarted during provisioning, necessary after
# updating the kernel
unless Vagrant.has_plugin?('vagrant-reload')
  fail 'vagrant-reload plugin is not installed'
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.provider :virtualbox do |vb|
    # VirtualBox 5 now supports paravirtualization
    vb.customize("pre-boot", ["modifyvm", :id, "--paravirtprovider", "KVM"])
    vb.customize [ "modifyvm", :id, "--memory", "1024" ]
  end

  config.vm.box = 'box-cutter/centos71'
  # Copy credential files
  config.vm.provision :file,
                      source: 'credentials',
                      destination: 'credentials'
  # Update kernel and start to configure base system
  config.vm.provision :shell, path: 'bootstrap.py', privileged: true
  config.vm.provision :reload
  # Finish configuring base system
  config.vm.provision :shell,
                      path: 'post-reboot-bootstrap.py',
                      privileged: true,
                      args: [
                        ENV.fetch('FLOCKER_RPM_VERSION', ''),
                        ENV.fetch('FLOCKER_BRANCH', ''),
                        ENV.fetch('FLOCKER_BUILD_SERVER', '')
                      ]

  # Despite the fact that the Vagrant 'docker' provider is tempting to use
  # here, we instead use a shell script to start docker and pull down docker
  # images. In the past we've had bad luck with the Vagrant 'docker' provider
  # being fragile relative to new releases of docker running on CentOS
  # (FLOC-3372).
  config.vm.provision :shell,
                      path: 'setup_docker.sh',
                      privileged: true

  # Cleanup
  config.vm.provision :shell, path: '../cleanup.sh', privileged: true
  #
  # Don't use a shared folder.
  # - It isn't used during the build or after.
  # - The vguest plugin tries to compile a new vboxsf module, but
  #   fails on the first boot, since it can't install the corresponding
  #   kernel-devel headers.
  config.vm.synced_folder '.', '/vagrant', disabled: true

  config.cache.scope = :box if Vagrant.has_plugin?('vagrant-cachier')
end


# make sure we can install the VBox guest utils
# https://github.com/dotless-de/vagrant-vbguest/issues/141#issuecomment-101071914
#
module UpdateCentOSKernel
  class UpdateCentOSKernelPlugin < Vagrant.plugin('2')
    name 'update_centos_kernel_plugin'

    # update yum after first boot when provisioning
    action_hook(:update_yum, :machine_action_up) do |hook|
      hook.after(VagrantPlugins::ProviderVirtualBox::Action::CheckGuestAdditions, UpdateCentOSKernel::Middleware::KernelUpdater)
    end
  end

  module Middleware
    class KernelUpdater
      @@rebooted = {};

      def initialize(app, env)
        @app = app
      end

      def call(env)
        @env = env
        @vm = env[:machine]
        @ui = env[:ui]
        self.update_kernel()
      end

      def update_kernel()
        if !@@rebooted[@vm.id]
          @@rebooted[@vm.id] = true

          @ui.info 'Updating kernel'
          @vm.communicate.sudo('yum -y install kernel kernel-devel') do |type, data|
            if type == :stderr
              @ui.error(data);
            else
              @ui.info(data);
            end
          end

          @ui.info 'Installing Development Tools'
          @vm.communicate.sudo('yum -y groups mark convert') do |type, data|
            if type == :stderr
              @ui.error(data);
            else
              @ui.info(data);
            end
          end
          @vm.communicate.sudo('yum -y groupinstall "Development Tools"') do |type, data|
            if type == :stderr
              @ui.error(data);
            else
              @ui.info(data);
            end
          end


          self.reboot()
        end
      end

      def reboot()
        @ui.info('Rebooting after updating kernel')
        simple_reboot = Vagrant::Action::Builder.new.tap do |b|
          b.use Vagrant::Action::Builtin::Call, Vagrant::Action::Builtin::GracefulHalt, :poweroff, :running do |env2, b2|
            if !env2[:result]
              b2.use VagrantPlugins::ProviderVirtualBox::Action::ForcedHalt
            end
          end

          b.use VagrantPlugins::ProviderVirtualBox::Action::Boot
          if defined?(Vagrant::Action::Builtin::WaitForCommunicator)
            b.use Vagrant::Action::Builtin::WaitForCommunicator, [:starting, :running]
          end
          b.use VagrantVbguest::Middleware
        end
        @env[:action_runner].run(simple_reboot, @env)
      end
    end
  end
end
