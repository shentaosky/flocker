#!/usr/bin/env python

"""
A tool for use by the CI system to clean up old versions of Vagrant boxes that
get downloaded as part of CI work.  This helps keep disks of slaves from
filling up with useless old boxes and eventually failing when there are too
many.

The newest version of the box is kept.

Usage::

  cleanup-vagrant-boxes <name of box>
"""

from __future__ import unicode_literals, print_function

from distutils.version import LooseVersion
from subprocess import check_output


class Box(object):
    """
    Representation of some trivial metadata for a version of a Vagrant box.

    :ivar bytes _version_string: The uninterpreted version string as reported
        by Vagrant.
    :ivar LooseVersion version: The parsed form of the version.
    :ivar bytes name: The name of the box as reported by Vagrant.
    """
    def __init__(self, name, rest):
        """
        :param bytes rest: The second columne from a ``vagrant box list``
            command, eg ``b"(virtualbox, 0.3.2.doc1.2008.g63e63f2)"``
        """
        self._version_string = rest[1:-1].split()[1]
        self.version = LooseVersion(self._version_string)
        self.name = name


    def remove(self):
        """
        Remove this version of this box from the system.
        """
        check_output([
            b"vagrant", b"box", b"remove",
            b"--box-version", self._version_string, self.name,
        ])


def list_vagrant_boxes():
    """
    :return: An iterator of ``Box`` instances, one for each version of each box
        on the system.
    """
    boxes = check_output([b"vagrant", b"box", b"list"])
    return (
        Box(*line.split(None, 1))
        for line
        in boxes.splitlines()
        if b" " in line
    )


def main(box_name):
    """
    Remove all but the most recent version of a Vagrant box.

    :param bytes box_name: The name of the Vagrant box to manipulate.
    """
    boxes = list(
        box for box in list_vagrant_boxes() if box.name == box_name
    )
    boxes.sort(key=lambda box: box.version)

    # Remove all but the newest version of the box.  Keeping the newest version
    # means we don't have to re-download it all the time whenever the version
    # hasn't changed.
    print("Keeping {}".format(boxes.pop().version))
    for box in boxes:
        print("Removing {}".format(box.version))
        box.remove()

if __name__ == '__main__':
    from sys import argv
    main(argv[1])
