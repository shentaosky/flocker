# Copyright ClusterHQ Inc.  See LICENSE file for details.

"""
TLS context factories used to validate the various kinds of
certificates generated by the CA.

We rely on Twisted's ``CertificateOptions`` to provide certain defaults,
e.g. TLS only (no SSL).
"""

from OpenSSL.SSL import VERIFY_PEER, VERIFY_FAIL_IF_NO_PEER_CERT

from zope.interface import implementer

from twisted.web.iweb import IPolicyForHTTPS
from twisted.internet.ssl import optionsForClientTLS, Certificate
from twisted.web.client import Agent

from treq.client import HTTPClient

from pyrsistent import PClass, field

from ._ca import UserCredential


@implementer(IPolicyForHTTPS)
class ControlServicePolicy(PClass):
    """
    HTTPS TLS policy for validating the control service's identity, and
    providing the HTTP client's identity.

    :ivar Certificate ca_certificate: The certificate authority's
        certificate.

    :ivar FlockerCredential client_credential: Client's certificate and
        private key pair.
    """
    ca_certificate = field(mandatory=True)
    client_credential = field(mandatory=True)

    def creatorForNetloc(self, hostname, port):
        return optionsForClientTLS(
            u"control-service",
            trustRoot=self.ca_certificate,
            clientCertificate=self.client_credential.private_certificate())


class _ControlServiceContextFactory(object):
    """
    Context factory that validates various kinds of clients that can
    connect to the control service.
    """
    def __init__(self, ca_certificate, control_credential, prefix):
        """
        :param Certificate ca_certificate: The certificate authority's
            certificate.

        :param ControlCredential control_credential: The control service's
            credentials.

        :param bytes prefix: The required prefix on certificate common names.
        """
        self.prefix = prefix
        self.control_credential = control_credential
        self.ca_certificate = ca_certificate

    def getContext(self):
        default_options = self.control_credential._default_options(
            self.ca_certificate)

        def verify(conn, cert, errno, depth, preverify_ok):
            if depth > 0:
                # Certificate authority chain:
                return preverify_ok
            # Now we're actually verifying certificate we care about:
            if not preverify_ok:
                return preverify_ok
            return cert.get_subject().commonName.startswith(self.prefix)
        context = default_options.getContext()
        context.set_verify(VERIFY_PEER | VERIFY_FAIL_IF_NO_PEER_CERT,
                           verify)
        return context


def amp_server_context_factory(ca_certificate, control_credential):
    """
    Create a context factory that validates node agents connecting to the
    control service.

    :param Certificate ca_certificate: The certificate authority's
        certificate.

    :param ControlCredential control_credential: The control service's
        credentials.

    :return: TLS context factory suitable for use by the control service
        AMP server.
    """
    return _ControlServiceContextFactory(
        ca_certificate, control_credential, b"node-")


def rest_api_context_factory(ca_certificate, control_credential):
    """
    Create a context factory that validates REST API clients connecting to
    the control service.

    :param Certificate ca_certificate: The certificate authority's
        certificate.

    :param ControlCredential control_credential: The control service's
        credentials.

    :return: TLS context factory suitable for use by the control service
        REST API server.
    """
    return _ControlServiceContextFactory(
        ca_certificate, control_credential, b"user-")


def treq_with_authentication(reactor, ca_path, user_cert_path, user_key_path):
    """
    Create a ``treq``-API object that implements the REST API TLS
    authentication.

    That is, validating the control service as well as presenting a
    certificate to the control service for authentication.

    :param reactor: The reactor to use.
    :param FilePath ca_path: Absolute path to the public cluster certificate.
    :param FilePath user_cert_path: Absolute path to the user certificate.
    :param FilePath user_key_path: Absolute path to the user private key.

    :return: ``treq`` compatible object.
    """
    ca = Certificate.loadPEM(ca_path.getContent())
    user_credential = UserCredential.from_files(user_cert_path, user_key_path)
    policy = ControlServicePolicy(
        ca_certificate=ca, client_credential=user_credential.credential)
    return HTTPClient(Agent(reactor, contextFactory=policy))
